{"name":"Stateless-dns-go","tagline":"A go (golang) port of https://github.com/taskcluster/stateless-dns-server/blob/master/index.js","body":"stateless-dns-go\r\n================\r\n<img src=\"https://tools.taskcluster.net/lib/assets/taskcluster-120.png\" />\r\n\r\nA go (golang) port of https://github.com/taskcluster/stateless-dns-server/blob/master/index.js\r\n\r\n[![GoDoc](https://godoc.org/github.com/taskcluster/stateless-dns-go?status.svg)](https://godoc.org/github.com/taskcluster/stateless-dns-go)\r\n[![Build Status](https://travis-ci.org/taskcluster/stateless-dns-go.svg?branch=master)](http://travis-ci.org/taskcluster/stateless-dns-go)\r\n[![Coverage Status](https://coveralls.io/repos/taskcluster/stateless-dns-go/badge.svg?branch=master&service=github)](https://coveralls.io/github/taskcluster/stateless-dns-go?branch=master)\r\n[![License](https://img.shields.io/badge/license-MPL%202.0-orange.svg)](https://github.com/taskcluster/stateless-dns-go/blob/master/LICENSE)\r\n\r\nstateless-dns-go provides:\r\n\r\n* A go (golang) package for generating client dns names that can be used in\r\n  conjunction with https://github.com/taskcluster/stateless-dns-server, that\r\n  can be directly imported in go applications\r\n* A command line utility to expose the features of the library, which can be\r\n  called from any language\r\n\r\nDomains generated by this library encode an IP-address, expiration date, a\r\nrandom salt and an HMAC-SHA256 signature truncated to 128 bits.\r\n\r\nThis provides a mechanism to assign temporary sub-domains names to nodes with a\r\npublic IP-address. The same problem can also be solved with dynamic DNS server,\r\nbut such entries often requires clean-up. The beauty of this approach is that\r\nthe DNS server is state-less, so there is no stale DNS records to discard.\r\n\r\nIn TaskCluster this is used to assign temporary sub-domain names to EC2 spot\r\nnodes, such that we can host HTTPS resources, such as live logs, without\r\nupdating and cleaning up the state of the DNS server.\r\n\r\nNotice, that with IP-address, expiration date, random salt and HMAC-SHA256\r\nsignature encoded in the sub-domain label, you cannot decide which sub-domain\r\nlabel you wish to have. Hence, this is only useful in cases were the hostname\r\nfor your node is transmitted to clients by other means, for example in a\r\nmessage over RabbitMQ or as temporary entry in a database. Further more, to\r\nserve HTTPS content you'll need a wild-card SSL certificate, for domain managed\r\nby this DNS server.\r\n\r\nNote, this obviously doesn't have many applications, as the sub-domain label is\r\nstateful. It's mostly for serving HTTPS content from nodes that come and go\r\nquickly with minimal setup, where the hostname is transmitted by other means.\r\nGenerally, any case where you might consider using the default EC2 hostname.\r\n\r\nSub-domain Label Generation\r\n---------------------------\r\nThe sub-domain label encodes the following parameters:\r\n * `ip`, address to which the `A` record returned should point,\r\n * `expires`, expiration of sub-domain as number of ms since epoch,\r\n * `salt`, random salt, allowing for generation of multiple sub-domain labels\r\n   for each IP-address, and,\r\n * `signature`, HMAC-SHA256 signature of `ip`, `expires` and `salt` truncated\r\n   to 128 bit.\r\n\r\nThe `expires` property is encoded as a big-endian 64 bit signed integer. The\r\n`salt` property is encoded as bit-endian 16 bit unsigned integer. All\r\nproperties are concatenated and base32 (RFC 3548) encoded to form the\r\nsub-domain label.\r\n\r\n\r\nGo library usage\r\n----------------\r\n\r\nHere is a silly example:\r\n\r\n```go\r\nimport (\r\n\t\"fmt\"\r\n\t\"net\"\r\n\t\"time\"\r\n\r\n\t\"github.com/taskcluster/stateless-dns-go/hostname\"\r\n)\r\n\r\nfunc PrintHostname() {\r\n\tip := net.IPv4(byte(203), byte(43), byte(55), byte(2))\r\n\tsubdomain := \"foo.com\"\r\n\texpires := time.Now().Add(15 * time.Minute)\r\n\tsecret := \"turnip-4tea-2nite\"\r\n\tname, err := hostname.New(ip, subdomain, expires, secret)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Printf(\"Hostname: '%s'\\n\", name)\r\n}\r\n```\r\n\r\nInstalling command line tool\r\n----------------------------\r\n\r\n__Binary installation__\r\n\r\nDownload the create-hostname command line tool for your platform from\r\n[here](https://github.com/taskcluster/stateless-dns-go/releases).\r\n\r\n__Source installation__\r\n\r\nRequirements:\r\n\r\n  * go (golang) v1.4 or higher\r\n  * `${GOPATH}/bin` is in your path\r\n\r\nRun:\r\n\r\n```\r\ngo get github.com/taskcluster/stateless-dns-go/create-hostname\r\n```\r\n\r\nCommand line usage\r\n------------------\r\n\r\n\r\n```\r\nUsage:\r\n  create-hostname --ip IP --subdomain SUBDOMAIN --expires EXPIRES --secret SECRET\r\n  create-hostname -h|--help\r\n  create-hostname --version\r\n\r\nExit Codes:\r\n   0: Success\r\n   1: Unrecognised command line options\r\n  64: Invalid IP given\r\n  65: IP given was an IPv6 IP (IP should be an IPv4 IP)\r\n  66: Invalid SUBDOMAIN given\r\n  67: Invalid EXPIRES given\r\n  68: Invalid SECRET given\r\n  69: Some other problem\r\n\r\nExamples:\r\n  $ create-hostname --ip 203.115.35.2 --subdomain foo.com --expires 2016-06-04T16:04:03.739Z --secret 'cheese monkey'\r\n  znzsgaqaau2hl7h35f4owqn25s76j4h7apm3fe4qpy6pfxjk.foo.com\r\n```\r\n\r\nLicense\r\n-------\r\nThe `hostname` library is released on the MPL 2.0 license, see file `LICENSE`\r\nfor the complete license.\r\n\r\nTesting\r\n-------\r\n\r\n```bash\r\ngo test ./...\r\n```\r\n\r\nTODO: write tests!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}